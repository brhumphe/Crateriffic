Texture(ID)
===========

.. module:: bpy.types

base classes --- :class:`bpy_struct`, :class:`ID`

subclasses --- 
:class:`BlendTexture`, :class:`CloudsTexture`, :class:`DistortedNoiseTexture`, :class:`EnvironmentMapTexture`, :class:`ImageTexture`, :class:`MagicTexture`, :class:`MarbleTexture`, :class:`MusgraveTexture`, :class:`NoiseTexture`, :class:`OceanTexture`, :class:`PointDensityTexture`, :class:`StucciTexture`, :class:`VoronoiTexture`, :class:`VoxelDataTexture`, :class:`WoodTexture`

.. class:: Texture(ID)

   Texture data-block used by materials, lamps, worlds and brushes

   .. data:: animation_data

      Animation data for this data-block

      :type: :class:`AnimData`, (readonly)

   .. data:: color_ramp

      :type: :class:`ColorRamp`, (readonly)

   .. attribute:: contrast

      Adjust the contrast of the texture

      :type: float in [0, 5], default 0.0

   .. attribute:: factor_blue

      :type: float in [0, 2], default 0.0

   .. attribute:: factor_green

      :type: float in [0, 2], default 0.0

   .. attribute:: factor_red

      :type: float in [0, 2], default 0.0

   .. attribute:: intensity

      Adjust the brightness of the texture

      :type: float in [0, 2], default 0.0

   .. data:: node_tree

      Node tree for node-based textures

      :type: :class:`NodeTree`, (readonly)

   .. attribute:: saturation

      Adjust the saturation of colors in the texture

      :type: float in [0, 2], default 0.0

   .. attribute:: type

      * ``NONE`` None.
      * ``BLEND`` Blend, Procedural - create a ramp texture.
      * ``CLOUDS`` Clouds, Procedural - create a cloud-like fractal noise texture.
      * ``DISTORTED_NOISE`` Distorted Noise, Procedural - noise texture distorted by two noise algorithms.
      * ``ENVIRONMENT_MAP`` Environment Map, Create a render of the environment mapped to a texture.
      * ``IMAGE`` Image or Movie, Allow for images or movies to be used as textures.
      * ``MAGIC`` Magic, Procedural - color texture based on trigonometric functions.
      * ``MARBLE`` Marble, Procedural - marble-like noise texture with wave generated bands.
      * ``MUSGRAVE`` Musgrave, Procedural - highly flexible fractal noise texture.
      * ``NOISE`` Noise, Procedural - random noise, gives a different result every time, for every frame, for every pixel.
      * ``OCEAN`` Ocean, Use a texture generated by an Ocean modifier.
      * ``POINT_DENSITY`` Point Density.
      * ``STUCCI`` Stucci, Procedural - create a fractal noise texture.
      * ``VORONOI`` Voronoi, Procedural - create cell-like patterns based on Worley noise.
      * ``VOXEL_DATA`` Voxel Data, Create a 3D texture based on volumetric data.
      * ``WOOD`` Wood, Procedural - wave generated bands or rings, with optional noise.

      :type: enum in ['NONE', 'BLEND', 'CLOUDS', 'DISTORTED_NOISE', 'ENVIRONMENT_MAP', 'IMAGE', 'MAGIC', 'MARBLE', 'MUSGRAVE', 'NOISE', 'OCEAN', 'POINT_DENSITY', 'STUCCI', 'VORONOI', 'VOXEL_DATA', 'WOOD'], default 'NONE'

   .. attribute:: use_clamp

      Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range

      :type: boolean, default False

   .. attribute:: use_color_ramp

      Toggle color ramp operations

      :type: boolean, default False

   .. attribute:: use_nodes

      Make this a node-based texture

      :type: boolean, default False

   .. attribute:: use_preview_alpha

      Show Alpha in Preview Render

      :type: boolean, default False

   .. data:: users_material

      Materials that use this texture
      (readonly)

   .. data:: users_object_modifier

      Object modifiers that use this texture
      (readonly)

   .. method:: evaluate(value)

      Evaluate the texture at the coordinates given

      :type value: float array of 3 items in [-inf, inf]
      :return:

         Result

      :rtype: float array of 4 items in [-inf, inf]

.. rubric:: Inherited Properties

.. hlist::
   :columns: 2

   * :class:`bpy_struct.id_data`
   * :class:`ID.name`
   * :class:`ID.users`
   * :class:`ID.use_fake_user`
   * :class:`ID.tag`
   * :class:`ID.is_updated`
   * :class:`ID.is_updated_data`
   * :class:`ID.is_library_indirect`
   * :class:`ID.library`
   * :class:`ID.preview`

.. rubric:: Inherited Functions

.. hlist::
   :columns: 2

   * :class:`bpy_struct.as_pointer`
   * :class:`bpy_struct.driver_add`
   * :class:`bpy_struct.driver_remove`
   * :class:`bpy_struct.get`
   * :class:`bpy_struct.is_property_hidden`
   * :class:`bpy_struct.is_property_readonly`
   * :class:`bpy_struct.is_property_set`
   * :class:`bpy_struct.items`
   * :class:`bpy_struct.keyframe_delete`
   * :class:`bpy_struct.keyframe_insert`
   * :class:`bpy_struct.keys`
   * :class:`bpy_struct.path_from_id`
   * :class:`bpy_struct.path_resolve`
   * :class:`bpy_struct.property_unset`
   * :class:`bpy_struct.type_recast`
   * :class:`bpy_struct.values`
   * :class:`ID.copy`
   * :class:`ID.user_clear`
   * :class:`ID.user_remap`
   * :class:`ID.make_local`
   * :class:`ID.user_of_id`
   * :class:`ID.animation_data_create`
   * :class:`ID.animation_data_clear`
   * :class:`ID.update_tag`

.. rubric:: References

.. hlist::
   :columns: 2

   * :mod:`bpy.context.texture`
   * :class:`BlendData.textures`
   * :class:`BlendDataTextures.new`
   * :class:`BlendDataTextures.remove`
   * :class:`Brush.mask_texture`
   * :class:`Brush.texture`
   * :class:`CompositorNodeTexture.texture`
   * :class:`DisplaceModifier.texture`
   * :class:`DynamicPaintSurface.init_texture`
   * :class:`FieldSettings.texture`
   * :class:`FreestyleLineStyle.active_texture`
   * :class:`Lamp.active_texture`
   * :class:`Material.active_texture`
   * :class:`ParticleSettings.active_texture`
   * :class:`ShaderNodeTexture.texture`
   * :class:`SmokeFlowSettings.noise_texture`
   * :class:`TextureNodeTexture.texture`
   * :class:`TextureSlot.texture`
   * :class:`VertexWeightEditModifier.mask_texture`
   * :class:`VertexWeightMixModifier.mask_texture`
   * :class:`VertexWeightProximityModifier.mask_texture`
   * :class:`WarpModifier.texture`
   * :class:`WaveModifier.texture`
   * :class:`World.active_texture`

