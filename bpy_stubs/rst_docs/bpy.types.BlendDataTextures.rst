BlendDataTextures(bpy_struct)
=============================

.. module:: bpy.types

base class --- :class:`bpy_struct`

.. class:: BlendDataTextures(bpy_struct)

   Collection of groups

   .. data:: is_updated

      :type: boolean, default False, (readonly)

   .. method:: new(name, type)

      Add a new texture to the main database

      :arg name:

         New name for the data-block

      :type name: string, (never None)
      :arg type:

         Type, The type of texture to add

         * ``NONE`` None.
         * ``BLEND`` Blend, Procedural - create a ramp texture.
         * ``CLOUDS`` Clouds, Procedural - create a cloud-like fractal noise texture.
         * ``DISTORTED_NOISE`` Distorted Noise, Procedural - noise texture distorted by two noise algorithms.
         * ``ENVIRONMENT_MAP`` Environment Map, Create a render of the environment mapped to a texture.
         * ``IMAGE`` Image or Movie, Allow for images or movies to be used as textures.
         * ``MAGIC`` Magic, Procedural - color texture based on trigonometric functions.
         * ``MARBLE`` Marble, Procedural - marble-like noise texture with wave generated bands.
         * ``MUSGRAVE`` Musgrave, Procedural - highly flexible fractal noise texture.
         * ``NOISE`` Noise, Procedural - random noise, gives a different result every time, for every frame, for every pixel.
         * ``OCEAN`` Ocean, Use a texture generated by an Ocean modifier.
         * ``POINT_DENSITY`` Point Density.
         * ``STUCCI`` Stucci, Procedural - create a fractal noise texture.
         * ``VORONOI`` Voronoi, Procedural - create cell-like patterns based on Worley noise.
         * ``VOXEL_DATA`` Voxel Data, Create a 3D texture based on volumetric data.
         * ``WOOD`` Wood, Procedural - wave generated bands or rings, with optional noise.

      :type type: enum in ['NONE', 'BLEND', 'CLOUDS', 'DISTORTED_NOISE', 'ENVIRONMENT_MAP', 'IMAGE', 'MAGIC', 'MARBLE', 'MUSGRAVE', 'NOISE', 'OCEAN', 'POINT_DENSITY', 'STUCCI', 'VORONOI', 'VOXEL_DATA', 'WOOD']
      :return:

         New texture data-block

      :rtype: :class:`Texture`

   .. method:: remove(texture, do_unlink=True, do_id_user=True, do_ui_user=True)

      Remove a texture from the current blendfile

      :arg texture:

         Texture to remove

      :type texture: :class:`Texture`, (never None)
      :arg do_unlink:

         Unlink all usages of this texture before deleting it

      :type do_unlink: boolean, (optional)
      :arg do_id_user:

         Decrement user counter of all datablocks used by this texture

      :type do_id_user: boolean, (optional)
      :arg do_ui_user:

         Make sure interface does not reference this texture

      :type do_ui_user: boolean, (optional)

   .. method:: tag(value)

      tag

      :arg value:

         Value

      :type value: boolean

.. rubric:: Inherited Properties

.. hlist::
   :columns: 2

   * :class:`bpy_struct.id_data`

.. rubric:: Inherited Functions

.. hlist::
   :columns: 2

   * :class:`bpy_struct.as_pointer`
   * :class:`bpy_struct.driver_add`
   * :class:`bpy_struct.driver_remove`
   * :class:`bpy_struct.get`
   * :class:`bpy_struct.is_property_hidden`
   * :class:`bpy_struct.is_property_readonly`
   * :class:`bpy_struct.is_property_set`
   * :class:`bpy_struct.items`
   * :class:`bpy_struct.keyframe_delete`
   * :class:`bpy_struct.keyframe_insert`
   * :class:`bpy_struct.keys`
   * :class:`bpy_struct.path_from_id`
   * :class:`bpy_struct.path_resolve`
   * :class:`bpy_struct.property_unset`
   * :class:`bpy_struct.type_recast`
   * :class:`bpy_struct.values`

.. rubric:: References

.. hlist::
   :columns: 2

   * :class:`BlendData.textures`

